name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKERHUB_REPOSITORY: spring-cicd-template           # set this to your Amazon dockerhub repository name

jobs:
  CI:
    name: Continuous Integration
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Upload jar file to Artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar_files
          path: build/libs/*.jar

      - name: Upload Dockerfile to Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Dockerfile
          path: ./Dockerfile

  CD_Delivery_to_DockerHub:
    name: CD_Delivery_to_DockerHub
    needs: CI
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Download jar file from Artifact
        uses: actions/download-artifact@v4
        with:
          name: jar_files
          path: build/libs

      - name: Download Dockerfile file from Artifact
        uses: actions/download-artifact@v4
        with:
          name: Dockerfile
          path: ./

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get short SHA
        id: slug
        run: echo "sha7=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to DockerHub
        id: build-image
        env:
          USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_TAG: ${{ steps.slug.outputs.sha7 }}

        run: |
          docker build -t $USERNAME/$DOCKERHUB_REPOSITORY:$IMAGE_TAG -t $USERNAME/$DOCKERHUB_REPOSITORY:latest .
          docker push $USERNAME/$DOCKERHUB_REPOSITORY --all-tags
          echo "image=$USERNAME/$DOCKERHUB_REPOSITORY:$IMAGE_TAG&latest" >> $GITHUB_OUTPUT

#      - name: Delete Oldest Image on docker HUB
#        run: |
#          OLDEST_DIGEST=$(aws ecr describe-images --repository-name $DOCKERHUB_REPOSITORY --query 'sort_by(imageDetails,& imagePushedAt)[0].imageDigest' --output text)
#          if [ -n "$OLDEST_DIGEST" ]; then
#            echo "Deleting oldest image with digest: $OLDEST_DIGEST"
#            aws ecr batch-delete-image --repository-name $DOCKERHUB_REPOSITORY --image-ids imageDigest=$OLDEST_DIGEST
#          else
#            echo "No images found in repository $DOCKERHUB_REPOSITORY"
#          fi
#
#  Deploy:
#    name: Deploy
#    needs: CD_Delivery_to_ECR
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Executing remote ssh commands
#        uses: appleboy/ssh-action@v0.1.6 # ssh 접속하는 오픈소스
#        with:
#          host: ${{ secrets.REMOTE_IP }} # 인스턴스 IP
#          username: ${{ secrets.REMOTE_USER }} # 우분투 아이디
#          key: ${{ secrets.REMOTE_PRIVATE_KEY }} # ec2 instance pem key
#          port: ${{ secrets.REMOTE_SSH_PORT }} # 접속포트
#          script: | # 실행할 스크립트
#            cd /home/ubuntu/scripts
#            ./profile.sh